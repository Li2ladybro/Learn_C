/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */

// 时间复杂度：O(n)=n;
int TreeDepth(struct TreeNode* root) {
    if (root == NULL) {
        return 0;
    } else {
        int lSize = TreeDepth(root->left);
        int rSize = TreeDepth(root->right);

        int maxSize = lSize > rSize ? lSize : rSize;
        return maxSize + 1;
    }
}

// 时间复杂度：
// 最好的情况：一上来，根结点的平衡因子就大于1，就直接返回0
// 此时的O(n)=n ，主要用来计算树的高度

// 最坏的情况：遍历一圈后，才得出，最后一个结点的平衡因子大于1
// 此时的O(n)=n^2
bool isBalanced(struct TreeNode* root) {

    if (root == NULL) {
        return 1;
    }

    int lDepth = TreeDepth(root->left);
    int rDepth = TreeDepth(root->right);
    // printf("lDepth=%d\n",lDepth);
    // printf("rDepth=%d\n",rDepth);

    int gap = abs(lDepth - rDepth);
    // printf("gap=%d\n",gap);
    if (gap > 1) {
        return 0;
    }

    return isBalanced(root->left) && isBalanced(root->right);
}


/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     struct TreeNode *left;
 *     struct TreeNode *right;
 * };
 */

// 时间复杂度为 O(n)=n
// 后序遍历
int _isBalanced(struct TreeNode* root,int* depth)
{
    if(root==NULL)
    {
        return 1;
    }
    else
    {
        int leftDepth=0;
        if(_isBalanced(root->left,&leftDepth)==0)
        {
            return 0;
        }

        int rightDepth=0;
        if(_isBalanced(root->right,&rightDepth)==0)
        {
            return 0;
        }

        if( abs (leftDepth-rightDepth) >1 )
        {
            return 0;
        }

        *depth=leftDepth>rightDepth?leftDepth+1:rightDepth+1;
        return 1;
    }
}
bool isBalanced(struct TreeNode* root) {
    int depth=0;
    return _isBalanced(root,&depth);
    
}


